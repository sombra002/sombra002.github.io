<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[数组的定义及操作]]></title>
    <url>%2F2019%2F04%2F29%2F%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[数组概念：数组是存储同一种数据类型多个元素的集合。也可以看成是一个容器。 数组既可以存储基本数据类型，也可以存储引用数据类型 定义格式： 123格式一：数据类型[] 数组名；格式二：数据类型 数组名[]; 举例： 123int[ ] a; //定义了一个int类型的数组a；int a[ ]; //定义了一个int类型的数组a； 案例： 1234567891011121314151617181920212223242526public class ArrayDemo &#123; public static void main(String[] args) &#123; //数组：你可以一个容器，他用来存储一组相同类型的数据。 //数组的定义语法 //方式1：动态的定义方式，由我们规定数组的长度，由系统赋默认值 //创建一个int类型的数组 //当我们创建好了数组后，系统会给分配索引（角标）从0开始 int[] arr=new int[10]; //往数组中放入数据 通过数组的索引往里面存数据 arr[0]=10; arr[1]=20; arr[2]=30; //取数组中的元素 int num=arr[2]; System.out.println(num); System.out.println(arr[4]); System.out.println(arr[5]); //语法2 boolean bs[]=new boolean[2]; bs[0]=true; System.out.println(bs[0]); System.out.println(bs[1]); &#125;&#125; 数组可以存储基本数据类型，也可以存储引用数据类型。 1234567891011121314151617public class ArrayDemo &#123; public static void main(String[] args) &#123; int[] arr1 = new int[3]; arr1[0] = 10; arr1[1] = 20; System.out.println(arr1[1]); int[] arr2 = new int[3]; arr2[0] = 100; arr2[1] = 200; System.out.println(arr2[1]); System.out.println(arr1); System.out.println(arr2); //数据类型：基本数据类型和引用数据类型 //引用数据类型，你使用new关键字初始化的数据 数组 类 接口 枚举 Java中的内存分配以及栈和堆的区别 栈: 存放的是局部变量 局部变量：在方法定义中或者方法声明上的变量都是局部变量。 堆: 存放的是所有new出来的东西 特点： a: 每一个new出来的东西都会为其分配一个地制值。 b: 每一个变量都有一个默认的值 12345byte，short，int，long --------&gt;0float，double ----------------------&gt;0.0char –----------------------------------&gt;‘\u0000’boolean ------------------------------&gt; false引用数据类型------------------------&gt; null 使用完毕就变成了垃圾，等待垃圾回收器对其回收 方法区 本地方法区:(和系统相关) 寄存器:(cpu使用) 两个数组的内存图 三个数组的内存图 数组的初始化Java中数组必须先初始化才能使用，即为数组中的元素分配内存空间并赋值 初始化的分类： ​ （1）动态初始化: 只指定长度，由系统给出初始化值 ​ （2）静态初始化: 给出初始化值，由系统决定长度 ​ 注意：两种初始化方式只能使用一种，不能动静结合 动态初始化格式： 1数据类型[] 数组名 = new 数据类型[数组长度]; 举例： 1int[] arr = new int[3]; //定义了一个int类型的数组arr，这个数组可以存放4个int类型的值。 动态初始化的内存图解 静态初始化格式： 1数据类型[] 数组名 = new 数据类型[]&#123;元素1,元素2,…&#125;; 举例： i 1int[] arr = new int[]&#123;1,2,3&#125;; 简化格式： 1数据类型[] 数组名 = &#123;元素1,元素2,…&#125;; 举例： 1int[] arr = &#123;1,2,3&#125;; 静态初始化内存图]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[键盘录入数据、流程控制语句、方法、方法重载]]></title>
    <url>%2F2019%2F04%2F05%2F%E9%94%AE%E7%9B%98%E5%BD%95%E5%85%A5%E6%95%B0%E6%8D%AE%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%2F</url>
    <content type="text"><![CDATA[键盘录入1、在类（class）上面导包 ​ 格式： 1import java.util.Scanner; 2、创建键盘录入对象 ​ 格式： 1Scanner sc = new Scanner(System.in); 3、通过对象的方法获取键盘录入的数据 123int x = sc.nextInt();String str = sc.nextLine();... Java语言三种结构Java语言三种结构：顺序结构、选择结构、循环结构 顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的，即写在前面的先执行，写在后面的后执行，从上往下，依次执行。 1234System.out.println(&quot;a&quot;);System.out.println(&quot;b&quot;);System.out.println(&quot;c&quot;);//顺序结构，自上而下执行，依次输出a,b,c 选择结构选择结构包括if语句和switch语句 if语句​ 格式一： 123if(boolean类型的表达式或值)&#123; 语句体 //当()内表达式为true时进入大括号执行语句体&#125; ​ 案例： 1234if(4&gt;3)&#123; System.out.println(&quot;执行的该语句&quot;);&#125;// 控制台会打印出&quot;执行的该语句&quot; ​ 格式二： 12345if(条件)&#123; 条件为真，执行这个括号里面的代码&#125;else&#123; 条件为假，执行这个括号里面的代码&#125; ​ 案例： 123456if(10+2&gt;5-3)&#123; System.out.println(&quot;这是真的&quot;);&#125;else&#123; System.out.println(&quot;这是假的&quot;);&#125;// 运行结果为&quot;这是真的&quot; ​ 三元运算符能实现的，都可以采用if语句实现，但反之不成立 ​ 什么时候if语句实现不能用三元改进呢? 当if语句控制的操作是一个输出语句的时候就不能改写 ​ 格式三： 123456789if(条件1)&#123; 语句体1 //满足条件1则执行此处&#125;else if(条件2)&#123; 语句体2 //满足条件2则执行此处&#125;...else&#123; 语句体n+1 //条件1、2、...n都不满足则执行此处语句&#125; ​ 案例：获取三个数最大值 1234567891011int a=100;int b=10;int c=18;if(a&gt;b&amp;&amp;a&gt;c)&#123; max=a;&#125;else if(b&gt;a&amp;&amp;b&gt;c)&#123; max=b;&#125;else&#123; max=c;&#125; System.out.println(&quot;最大值是：&quot;+max); switch语句12345678910111213141516switch(常量/变量)&#123; case 值: 执行的代码 break; case 值: 执行的代码 break; case 值: 执行的代码 break; case 值: 执行的代码 break; default: 执行的代码 break; 注意： 1、switch语句支持的表达式的数据类型：byte 、short、 int、 char、JDK5以后可以是枚举、JDK7以后可以是String 2、case 后面的只能是常量，多个case后面的值不能出现相同的 3、default 可以写也可以不写，且功能的执行与位置无关，但是建议在最后，当所有case项都没有匹配上就会执行 4、break 结束整个switch语句，如果没有 break 会发生 case穿透，这种现象你可以利用 5、switch语句的结束条件：遇到break就结束了或者执行到末尾结束 案例一： 123456789101112131415161718192021222324int x = 2;int y = 3;switch(x)&#123;default: y++;case 3: y++;case 4: y++;&#125;System.out.println(&quot;y=&quot;+y);//6-----------------------------------------------------int x = 2;int y = 3;switch(x)&#123;default: y++;break;case 3: y++;case 4: y++;&#125;System.out.println(&quot;y=&quot;+y); // 4 循环结构循环结构包括for循环、while循环和do…while循环 for循环123for(初始化表达式语句;判断条件语句;控制条件语句) &#123; 循环体语句;&#125; 执行流程： a:执行初始化表达式语句 b:执行判断条件语句,看其返回值是true还是false，如果是true，就继续执行，如果是false，就结束循环 c:执行循环体语句 d:执行控制条件语句 e:回到b继续执行 注意：初始化表达式语句只执行一次 案例：打印1~100的数 123for(int i=1; i&lt;=100; i++)&#123; System.out.println(i)&#125; while循环1234while(判断条件语句) &#123; 循环体语句; 控制条件语句;&#125; 执行流程：先判断条件语句是否为true，若为true，则进入大括号执行循环语句和控制条件语句 案例：求1—100之间的和 1234567int i=1;int sum=0;while (j&lt;=100)&#123; sum+=j; j++;&#125;System.out.println(&quot;和是 &quot;+sum); do …while循环1234do &#123; 循环体语句; 控制条件语句;&#125;while(判断条件语句); 执行流程：先执行do里面的代码一次，然后再去判断，while括号里面的条件是否成立，如果成立，就继续执行{}里面的语句，如果条件不成立，则循环结束 案例： 123456int i=2;do&#123; System.out.println(&quot;你好&quot;); i--;&#125;while (i&gt;2); //执行一次do里面的代码 三种循环语句的区别 (1): do…while循环至少执行一次循环体。而for,while循环必须先判断条件是否成立，然后决定是否执行循环体语句。 (2): 如果你想在循环结束后，继续使用控制条件的那个变量，用while循环，否则用for循环。 死循环 当控制条件语句控制的那个变量丢失时，循环结构可能进入死循环 两种最简单的死循环格式: ​ while(true){…} ​ for(; ; ){…} 控制跳转语句什么是控制跳转语句：Java中的goto是保留字，目前不能使用。虽然没有goto语句可以增强程序的安全性，但是也带来很多不便， 比如想在某个循环执行到某一步的时候就结束，现在就做不了这件事情。为了弥补这个缺陷，Java就提供了break（中断），continue（继续）和return（返回）来实现控制语句的跳转和中断 break(1):在选择结构switch语句中 (2):在循环语句中 ​ 作用：常用于退出单层循环 ​ 注意：离开使用场景的存在是没有意义的 continue​ 在循环语句中 ​ 作用：跳出一次循环，执行下一步操作 ​ 注意：离开使用场景的存在是没有意义的 案例： 12345678910for(int x=1; x&lt;=10; x++) &#123; if(x%3==0) &#123; //在此处填写代码 &#125; System.out.println(“Java”);&#125; //我想在控制台输出2次:“Java“----braak;//我想在控制台输出7次:“Java“----continue;//我想在控制台输出13次:“Java“----System.out.println(“Java”); return​ 作用：return 就是退出一个方法 方法​ 为了解决代码重复编写的问题，可以将一个功能的代码提取出来放在一个{}中，并为这段代码起个名字，所提取出来的代码可以被看作是程序中定义的一个方法，就是对一段功能逻辑的封装，以实现重复调用。 格式 1234修饰符 返回值类型 方法名(参数类型 参数名1，参数类型 参数名2 …)&#123; 方法体; return 返回值;&#125; 举例：定义一个方法求1~n的和并返回值 123456public static int getSum(int n)&#123; int sum=0; for(int i = 1; i&lt;=n; i++)&#123; sum+=i; &#125;&#125; 主方法 1public static void main(String[] args) &#123;&#125; 主方法是一个程序的入口，主方法是JVM来调用的，一个类中只能有一个主方法 实参与形参 实参：调用方法时，传入的参数，叫做实际参数，简称实参，传常量，变量都可以。 形参：定义方法括号里面的参数，叫做形式参数，简称形参。形参的作用是，调用方法时，接收传过来的实参，多个形参你用逗号隔开。 注意 12345方法不调用不执行方法与方法是平级关系，不能嵌套定义方法定义的时候参数之间用逗号隔开方法调用的时候不用在传递数据类型如果方法有明确的返回值，一定要由return带回一个值 案例 123456789101112131415161718192021// 需求：根据键盘录入的数据输出对应的乘法表import java.util.Scanner;public class MyTest &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); System.out.println(&quot;请输入一个行数&quot;); int i = sc.nextInt(); //调用方法 showChengFaBiao(i); &#125; public static void showChengFaBiao(int a) &#123; for (int i = 1; i &lt;= a; i++) &#123; for (int j = 1; j &lt;= i; j++) &#123; System.out.print(j + &quot;*&quot; + i + &quot;=&quot; + (j * i) + &quot;\t&quot;); &#125; System.out.println(); &#125; &#125;&#125; 方法重载在同一个类中，允许存在一个以上的同名方法，只要它们的参数列表不同（参数个数或者参数类型不同），与返回值无关。调用的时候，会根据参数个数和参数类型去匹配。 1234567891011121314151617181920private static int add(int i, int i1) &#123; System.out.println(&quot;两个int参数方法调用了&quot;); return i + i1; &#125; private static double add(int i, double i1) &#123; System.out.println(&quot;一个int 一个double调用了&quot;); return i + i1; &#125; private static int add(int i, int i1, int i2, int i3) &#123; return i + i1 + i2 + i3; &#125; private static int add(int i, int i1, int i2) &#123; return i + i1 + i2; &#125;&#125;]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[进制、常量、变量、数据类型、运算符]]></title>
    <url>%2F2019%2F04%2F02%2F%E8%BF%9B%E5%88%B6%E3%80%81%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[进制二进制：由0、1组成，逢二进一，以0b开头， 八进制：由0~7组成，逢八进一，以0开头 十进制：由0~9组成，逢十进一，默认是十进制 十六进制：由0-9,A-F组成，逢十六进一，以0X开头 案例：输出不同进制表现10的数据二进制：0b10八进制：010十进制：10十六进制：0x10 任意进制到十进制的转换规则：系数*基数^权数次幂相加 1二进制转换为十进制：0b101----&gt; 1*2^0+0*2^1+1*2^2=5 其他进制转换到十进制以此类推 十进制到任意进制的转换规则：除基取余 直到商为0 余数反转 十进制转换为二进制： 5/2商2余1 2/2商1余0 1/2商0余1 余数反转（自下而上）的二进制为:0b101 原码 反码 补码原码：即二进制定点表示法 反码：正数的反码与其原码相同；负数的反码是除符号位外对其逐位取反 补码：正数的补码与其原码相同；负数的补码是在其反码的末位加1 案例： ​ 原码：1001011 ​ 反码：1110100（除符号位外对位取反） ​ 补码：1110101（反码加1） 变量什么是变量 在程序执行的过程中，在某个范围内其值可以发生改变的量，定义一个变量，其实就是开辟了一个内存空间 变量本质上是内存中的一块空间，这块空间“有数据类型”、“有名字”、“有字面值” 变量包括：数据类型 名字 字面值； 变量是内存中存储数据的最基本的单元 数据类型的作用：指导数据在内存中开辟多大的空间 不同的数据有不同的类型，不同的数据类型底层会分配不同大小的空间 数据类型是指导程序在运行阶段应该分配多大的内存空间 变量要求：变量中存储的具体的“数据”必须和变量的“数据类型”一致 定义格式 数据类型 变量名 = 变量值 变量声明后怎么赋值变量名 = 字面值； =等号是一个运算符，叫做赋值运算符，赋值运算符先运算等号右边的表达式，表达式执行结束后的结果赋值给左边的变量。 声明和赋值可以放到一起完成 1int i = 10； 变量赋值之后可以重新赋值，变量的值可变化123456int i = 10；System.out.println(i); //10i = 20;System.out.println(i); //20i = 30;System.out.println(i); //30 有了变量的概念之后，内存空间得到了重复的使用 通常访问一个变量包括两种访问形式 第一种：读取变量中保存的具体数据 get/获取 第二种：修改变量中保存的具体数据 set/设置 12i = 20; //setSystem.out.println(i); //get 变量在一行上可以声明多个1234int a,b,c//一行上可以同时声明多个变量 int a,b,c=300;//这一行说明只是给c赋值了，a,b并没有 变量必须先声明，再赋值，才能访问1234567891011public class Varible &#123; public static void main (String[] args)&#123; int i； //程序执行到这里，内存空间没有开辟出来，变量i并没有初始化 //所以没有赋值之前是无法访问的 // System.out.println(i); //编译报错 //给i赋值，完成初始化，内存开辟 i = 100； System.out.println(i);//100 &#125; &#125; *变量的分类根据变量声明的位置来分类： 局部变量​ 在方法体当中声明的变量叫做局部变量 成员变量​ 在方法体外（类体内）声明的变量叫成员变量 在不同作用域中，变量名可以相同，就近原则 数据类型 不同数据数据类型的数据占用空间大小不同。 数据类型作用是指导JVM在运行程序时给数据分配多大的内存空间。 Java中数据类型的分类： ​ 基本数据类型 ​ 引用数据类型 基本数据类型整数型12345类型 字节数 范围byte 1(8bit) -128 ~ 127short 2(16bit) -2^15 ~ 2^15 - 1int 4(32bit) -2^31 ~ 2^31 - 1long 8(64bit) -2^63 ~ 2^63 - 1 浮点型123类型 字节数 范围float 4(32bit) -3.403*10^38 ~ 3.403*10^38double 8(64bit) -1.798*10^308 ~1.798*10^308 字符型12类型 字节数 范围char 2(16bit) 0 ~ 2^16 - 1 = 65535 ​ 换行符 \n 制表符 \t 布尔型12类型 字节数 boolean 1 整数默认是int类型的 ， 浮点数默认是 double类型的 引用数据类型如数组，接口，类等 注意： ​ 未初始化的变量不能使用​ 同一作用域内不能有两个同名变量​ 同一行可定义多个变量，但不建议 java数据类型的自动类型提升与强制转换自动类型提升byte short char 在参与数学运算时，会自动提升为int类型，如果还有long ,float double 参与运算则会相应的提升为 long float double ,布尔类型不参与数学运算，byte short char 之间不发生转换 12345byte a=10;short b=20;byte num=a+b; //报错,在运算时会转换为int类型，byte类型的num装不下int类型的数据a=a+1;//报错，1为int类型 强制类型转换强制将一个数据，转换成我们要的数据类型，强制类型转换，有可能会发生精度损失的问题 格式：目标数据类型 变量名=(目标数据类型)(被转换的数据); 1234byte a = 1;byte b = 127;short c =(short) a+b;//运算时虽然自动转换为int类型，但强制转换为short，且128在short数据类型范围内，此处不会发生精度损失byte c = (byte)128;//输出-128 案例 12345byte a=10;byte b=20;byte r=a+1; //报错，int转为byte可能发生精度损失byte rr=3+4; //不会报错 常量优化机制，多个常量相加时，他会先算出结果，看没有在这个数据类型的范围内，如果在，就不报错,如果不在就会报错char ch=&apos;爱&apos;; //char 占两个字节，gbk编码一个汉字占两个字节 ANSI 也是一个汉字占两个字节，UTF8 一个汉字占三个字节的 字符和字符串参与运算ASCII码表中: ‘a’97 ‘A’ 65 ‘0’ 48 123char ch = &apos;a&apos;;char ch2 = ch+1;//报错，从int转换到char可能会有精度损失int r = ch+1;//不报错，输出98 当+号运算两端只要任意一端是一个字符串，那么加号就起连接符的作用，就会将两端的内容拼接起来，形成一个新的字符串 1234567System.out.println(&quot;Hello World!&quot;+100); //&quot;Hello World!100&quot;System.out.println(&quot;Hello World!&quot;+100+86);//&quot;Hello World!10086&quot;System.out.println(&quot;Hello World!&quot;+&quot;10086&quot;);// &quot;Hello World!10086&quot; System.out.println(10086+&quot;Hello World!&quot;);//&quot;10086Hello World!&quot;System.out.println(100+&quot;Hello World!&quot;+100+86);//100Hello World!10086System.out.println(100+86+&quot;Hello World!&quot;+100+86); //186HelloWorld!10086System.out.println(&quot;5+5=&quot;+5+5);//&quot;5+5=55&quot;System.out.println(5+5+&quot;=5+5&quot;);//&quot;10=5+5&quot; 运算符 什么是运算符:对常量和变量进行操作的符号称为运算符 运算符的分类: 123456算术运算符 赋值运算符比较运算符逻辑运算符位运算符三目运算符 注意事项： a:整数相除只能得到整数。如果想得到小数，请使用浮点数 b:/获取的是除法操作的商，%获取的是除法操作的余数 %运算结果的符号，取决于参与运算是左边的符号。 算数运算符 算数运算符有哪些:+ , - , * , / , % , ++ , – /：整数相除只能得到整数，要得到小数需使用服浮点数 ++:自加,对原有的数据进行+1–:自减,对原有的数据进行-1 ++,–运算符单独使用：放在操作数的前面和后面效果一样 ++,–参与运算时使用：放在操作数的前面，先自增或者自减，然后再参与运算 放在操作数的后面，先参与运算，再自增或者自减 案例 1234567int a = 3;a++;//此处a=4++a;//此处a=5a--;//a=4--a;//a=3int num = a++; //num=3 a=4int num2 = ++a; //num2=5 a=5 赋值运算符赋值运算符有哪些：=， +=,-=,*=,/=,%= 案例： 123byte b =3;b = b+1; //报错b+=1; //不报错，会自动强制类型转换，然后判断累加完的结果，在不在这个数据类型的范围内，如果不在会自动强制类型转换 比较运算符关系运算符有哪些：== ,!= , &lt; , &gt; , &lt;= , &gt;= 关系运算符运算结果是booean型 逻辑运算符逻辑运算符有哪些：&amp;(并且) , |(或者) , !(非) , ^(异或) , &amp;&amp;(短路与) , ||(短路或) 逻辑运算符运算结果是booean型 &amp;(并且) , |(或者) 和 &amp;&amp;(短路与) ,||(短路或) 在运算结果上没有区别，区别在运算效率上：&amp;，运算符两端都会计算，而&amp;&amp;，||只要左端能得出计算结果，则不会执行右端 案例： 1234int a = 1;int b = 2;boolean flag = a==2 &amp;&amp; (a&gt;b);//&amp;&amp;左端已经为false，则右端不会再进行判断System.out.println() 三元运算符语法：布尔表达式?结果1:结果2 案例：求两个数最大值 123int a = 1;int b = 2;int max = a&gt;b?a:b; 位运算符位运算符有哪些： ​ &amp;(与)，|(或)，^(异或) , ~(按位取反) , &lt;&lt;(左移) ,&gt;&gt;(右移) ,&gt;&gt;&gt;(无符号右移) &amp;:有0则0|:有1则1^:相同则0，不同则1~:按位取反 0变1 1变0 &lt;&lt; : 把&lt;&lt;左边的数据乘以2的移动次幂 例如 10&lt;&lt;3 结果 10*2^3=80 12345int flag = 1&amp;2; //0int flag = 1|2; //3int flag = ~3; //-4int num = 3&gt;&gt;2; //3/2^2=0int num = 3&lt;&lt;2; //3*2^2=12]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java简介、注释、、常见DOS命令]]></title>
    <url>%2F2019%2F04%2F01%2FJava%E7%AE%80%E4%BB%8B%E3%80%81%E6%B3%A8%E9%87%8A%E3%80%81%E3%80%81%E5%B8%B8%E8%A7%81DOS%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[一、DOS常用命令 DOS命令 功能 cd + 目录名 进入该目录 cd… 回退上一级目录 cd…/…/ 回退上两级目录 cd /盘符 + 完整路径名 跨盘操作 md + 目录名 新建一个目录 rd + 目录名 删除一个空目录 rd /s + 目录名 删除非空目录，删除前会确认是否删除 rd /s /q + 目录名 删除非空目录，直接删除 del + 文件名.后缀名 删除该文件 del + *.后缀名 删除该目录下所有该后缀名的文件 mspaint 打开画图 calc 打开计算器 cls 清屏 exit 退出 hsotname 查看主机名 ipconfig 查看IP地址 shutdow -s -t 0 在0秒后关机 二、JDK JRE JVMJDK：java开发工具包，提供给开发人员编写java程序JRE：java运行环境，源代码由JRE运行JVM：java虚拟机，实现跨平台注：JDK包含JRE，使用JDK开发java程序，交给JRE运行，由JVM实现跨平台 三、Java的三种注释//单行注释 /多行注释 / /*文档注释 / 四、标识符给类，变量等起的名字不能以数字开头可使用的符号：_ $见名知意给类命名首字母大写，多个字母采用驼峰式命名，如StudentName 五、常量定义：在程序中值不会发生的量称作常量，分为字面值常量和自定义常量字面值常量： 整数常量（1 2 3…）小数常量（1.1 …）字符常量（‘a’ ‘A’ ‘1’…）注：单引号括起来的一个字符字符串常量（“String” “1” “A”）注：用双引号括起来的一个或多个字符布尔常量（true false） 空常量（null） 六、关键字的概述和使用A:什么是关键字 就是被java语言赋予特殊含义的单词。B:关键字的特点 组成关键的字母都是小写C:常见关键字 class,public,static,void …..D:关键字的注意事项 (1): goto和const是java语言的保留字 (2): 类似与editplus这样的高级文本编辑器对关键字都是有颜色变化的 七、标识符的概述和组成规则“见名知意”A:什么是标识符 就是给类,接口,方法,变量,常量等起名字时使用的字符序列B:标识符的组成规则 (1): 英文的大小写字母 (2): 数字字符 (3): $和_C:标识符注意事项 (1): 不能以数字开头 (2): 不能是java中的关键字 (3): 区分大小写]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[欢迎访问我的博客！]]></title>
    <url>%2F2019%2F03%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[技术博客、人生感悟、随便写写。 大家笑一笑就好！]]></content>
  </entry>
</search>
