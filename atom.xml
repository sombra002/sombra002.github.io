<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赵泳智</title>
  
  <subtitle>这个世界会好的！：）</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sombra002.github.io/"/>
  <updated>2019-04-29T09:06:43.450Z</updated>
  <id>https://sombra002.github.io/</id>
  
  <author>
    <name>赵泳智</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数组的定义及操作1</title>
    <link href="https://sombra002.github.io/2019/04/29/%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E6%93%8D%E4%BD%9C/"/>
    <id>https://sombra002.github.io/2019/04/29/数组的定义及操作/</id>
    <published>2019-04-29T08:57:36.000Z</published>
    <updated>2019-04-29T09:06:43.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>概念：数组是存储同一种数据类型多个元素的集合。也可以看成是一个容器。</p><p>数组既可以存储基本数据类型，也可以存储引用数据类型</p><p>定义格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式一：数据类型[] 数组名；</span><br><span class="line"></span><br><span class="line">格式二：数据类型 数组名[];</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int[ ] a; //定义了一个int类型的数组a；</span><br><span class="line"></span><br><span class="line">int a[ ]; //定义了一个int类型的数组a；</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class ArrayDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //数组：你可以一个容器，他用来存储一组相同类型的数据。</span><br><span class="line">        //数组的定义语法</span><br><span class="line">        //方式1：动态的定义方式，由我们规定数组的长度，由系统赋默认值</span><br><span class="line">        //创建一个int类型的数组</span><br><span class="line">        //当我们创建好了数组后，系统会给分配索引（角标）从0开始</span><br><span class="line">        int[] arr=new int[10];</span><br><span class="line">        //往数组中放入数据 通过数组的索引往里面存数据</span><br><span class="line">        arr[0]=10;</span><br><span class="line">        arr[1]=20;</span><br><span class="line">        arr[2]=30;</span><br><span class="line">        //取数组中的元素</span><br><span class="line">        int num=arr[2];</span><br><span class="line">        System.out.println(num);</span><br><span class="line">        System.out.println(arr[4]);</span><br><span class="line">        System.out.println(arr[5]);</span><br><span class="line"></span><br><span class="line">        //语法2</span><br><span class="line">        boolean bs[]=new boolean[2];</span><br><span class="line">        bs[0]=true;</span><br><span class="line">        System.out.println(bs[0]);</span><br><span class="line">        System.out.println(bs[1]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数组可以存储基本数据类型，也可以存储引用数据类型。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class ArrayDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] arr1 = new int[3];</span><br><span class="line">        arr1[0] = 10;</span><br><span class="line">        arr1[1] = 20;</span><br><span class="line">        System.out.println(arr1[1]);</span><br><span class="line"></span><br><span class="line">        int[] arr2 = new int[3];</span><br><span class="line">        arr2[0] = 100;</span><br><span class="line">        arr2[1] = 200;</span><br><span class="line">        System.out.println(arr2[1]);</span><br><span class="line"></span><br><span class="line">        System.out.println(arr1);</span><br><span class="line">        System.out.println(arr2);</span><br><span class="line"></span><br><span class="line">        //数据类型：基本数据类型和引用数据类型</span><br><span class="line">        //引用数据类型，你使用new关键字初始化的数据 数组 类 接口 枚举</span><br></pre></td></tr></table></figure><h1 id="Java中的内存分配以及栈和堆的区别"><a href="#Java中的内存分配以及栈和堆的区别" class="headerlink" title="Java中的内存分配以及栈和堆的区别"></a>Java中的内存分配以及栈和堆的区别</h1><ul><li><p>栈: 存放的是局部变量</p><p>局部变量：在方法定义中或者方法声明上的变量都是局部变量。</p></li><li><p>堆: 存放的是所有new出来的东西</p></li><li><p>特点：</p><pre><code>a: 每一个new出来的东西都会为其分配一个地制值。b: 每一个变量都有一个默认的值</code></pre></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">byte，short，int，long --------&gt;0</span><br><span class="line">float，double ----------------------&gt;0.0</span><br><span class="line">char –----------------------------------&gt;‘\u0000’</span><br><span class="line">boolean ------------------------------&gt; false</span><br><span class="line">引用数据类型------------------------&gt; null</span><br></pre></td></tr></table></figure><p>使用完毕就变成了垃圾，等待垃圾回收器对其回收</p><ul><li>方法区</li><li>本地方法区:(和系统相关)</li><li>寄存器:(cpu使用)</li></ul><h2 id="两个数组的内存图"><a href="#两个数组的内存图" class="headerlink" title="两个数组的内存图"></a>两个数组的内存图</h2><p><img src="/2019/04/29/数组的定义及操作/D:/Hexo\blog\zhaoBlog\source\_posts\数组的定义及操作\两个数组的内存图.png" alt="两个数组的内存图"></p><h2 id="三个数组的内存图"><a href="#三个数组的内存图" class="headerlink" title="三个数组的内存图"></a>三个数组的内存图</h2><p><img src="/2019/04/29/数组的定义及操作/D:/Hexo\blog\zhaoBlog\source\_posts\数组的定义及操作\三个数组的内存图.png" alt="三个数组的内存图"></p><h1 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h1><p>Java中数组必须先初始化才能使用，即为数组中的元素分配内存空间并赋值</p><p>初始化的分类：</p><p>​    （1）动态初始化: 只指定长度，由系统给出初始化值</p><p>​    （2）静态初始化: 给出初始化值，由系统决定长度</p><p>​    注意：两种初始化方式只能使用一种，不能动静结合</p><h2 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h2><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = new 数据类型[数组长度];</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[] arr = new int[3]; //定义了一个int类型的数组arr，这个数组可以存放4个int类型的值。</span><br></pre></td></tr></table></figure><h3 id="动态初始化的内存图解"><a href="#动态初始化的内存图解" class="headerlink" title="动态初始化的内存图解"></a>动态初始化的内存图解</h3><p><img src="/2019/04/29/数组的定义及操作/D:/Hexo\blog\zhaoBlog\source\_posts\数组的定义及操作\动态初始化数组的内存图.png" alt="动态初始化数组的内存图"></p><h2 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h2><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = new 数据类型[]&#123;元素1,元素2,…&#125;;</span><br></pre></td></tr></table></figure><p>举例： i</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[] arr = new int[]&#123;1,2,3&#125;;</span><br></pre></td></tr></table></figure><p>简化格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = &#123;元素1,元素2,…&#125;;</span><br></pre></td></tr></table></figure><p>举例： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[] arr = &#123;1,2,3&#125;;</span><br></pre></td></tr></table></figure><h3 id="静态初始化内存图"><a href="#静态初始化内存图" class="headerlink" title="静态初始化内存图"></a>静态初始化内存图</h3><p><img src="/2019/04/29/数组的定义及操作/D:/Hexo\blog\zhaoBlog\source\_posts\数组的定义及操作\数组的静态初始化的内存图解.bmp" alt="数组的静态初始化的内存图解"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;p&gt;概念：数组是存储同一种数据类型多个元素的集合。也可以看成是一个容器。&lt;/p&gt;
&lt;p&gt;数组既可以存储基本数据类型，也可以存储引用数据类型&lt;/p
      
    
    </summary>
    
      <category term="JavaSE" scheme="https://sombra002.github.io/categories/JavaSE/"/>
    
    
  </entry>
  
  <entry>
    <title>键盘录入数据、流程控制语句、方法、方法重载</title>
    <link href="https://sombra002.github.io/2019/04/05/%E9%94%AE%E7%9B%98%E5%BD%95%E5%85%A5%E6%95%B0%E6%8D%AE%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <id>https://sombra002.github.io/2019/04/05/键盘录入数据、流程控制语句/</id>
    <published>2019-04-05T05:20:01.000Z</published>
    <updated>2019-04-29T08:26:25.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="键盘录入"><a href="#键盘录入" class="headerlink" title="键盘录入"></a>键盘录入</h1><p>1、在类（class）上面导包</p><p>​    格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br></pre></td></tr></table></figure><p>2、创建键盘录入对象</p><p>​    格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = new Scanner(System.in);</span><br></pre></td></tr></table></figure><p>3、通过对象的方法获取键盘录入的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int x = sc.nextInt();</span><br><span class="line">String str = sc.nextLine();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="Java语言三种结构"><a href="#Java语言三种结构" class="headerlink" title="Java语言三种结构"></a>Java语言三种结构</h1><p>Java语言三种结构：顺序结构、选择结构、循环结构</p><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><p>是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的，即<strong>写在前面的先执行，写在后面的后执行</strong>，从上往下，依次执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(&quot;a&quot;);</span><br><span class="line">System.out.println(&quot;b&quot;);</span><br><span class="line">System.out.println(&quot;c&quot;);</span><br><span class="line">//顺序结构，自上而下执行，依次输出a,b,c</span><br></pre></td></tr></table></figure><h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><p>选择结构包括if语句和switch语句</p><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>​    <strong>格式一：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(boolean类型的表达式或值)&#123;</span><br><span class="line">语句体  //当()内表达式为true时进入大括号执行语句体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(4&gt;3)&#123;</span><br><span class="line">System.out.println(&quot;执行的该语句&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//  控制台会打印出&quot;执行的该语句&quot;</span><br></pre></td></tr></table></figure><p>​    <strong>格式二：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(条件)&#123;</span><br><span class="line">条件为真，执行这个括号里面的代码</span><br><span class="line">&#125;else&#123;</span><br><span class="line">条件为假，执行这个括号里面的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(10+2&gt;5-3)&#123;</span><br><span class="line">System.out.println(&quot;这是真的&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">System.out.println(&quot;这是假的&quot;);</span><br><span class="line">&#125;</span><br><span class="line">// 运行结果为&quot;这是真的&quot;</span><br></pre></td></tr></table></figure><p>​    三元运算符能实现的，都可以采用if语句实现，但反之不成立</p><p>​    什么时候if语句实现不能用三元改进呢? 当if语句控制的操作是一个输出语句的时候就不能改写</p><p>​    <strong>格式三：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if(条件1)&#123;</span><br><span class="line">    语句体1 //满足条件1则执行此处</span><br><span class="line">&#125;else if(条件2)&#123;</span><br><span class="line">    语句体2  //满足条件2则执行此处</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">else&#123;</span><br><span class="line">    语句体n+1  //条件1、2、...n都不满足则执行此处语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    案例：获取三个数最大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int a=100;</span><br><span class="line">int b=10;</span><br><span class="line">int c=18;</span><br><span class="line">if(a&gt;b&amp;&amp;a&gt;c)&#123;</span><br><span class="line">max=a;</span><br><span class="line">&#125;else if(b&gt;a&amp;&amp;b&gt;c)&#123;</span><br><span class="line">max=b;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">max=c;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;最大值是：&quot;+max);</span><br></pre></td></tr></table></figure><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">switch(常量/变量)&#123;</span><br><span class="line">case 值:</span><br><span class="line">        执行的代码</span><br><span class="line">break;</span><br><span class="line">case 值:</span><br><span class="line">        执行的代码</span><br><span class="line">break;</span><br><span class="line">case 值:</span><br><span class="line">        执行的代码</span><br><span class="line">break;</span><br><span class="line">case 值:</span><br><span class="line">        执行的代码</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">执行的代码</span><br><span class="line">break;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>1、switch语句支持的表达式的数据类型：byte 、short、 int、 char、JDK5以后可以是枚举、JDK7以后可以是String</p><p>2、case 后面的只能是常量，多个case后面的值不能出现相同的</p><p>3、default 可以写也可以不写，且功能的执行与位置无关，但是建议在最后，当所有case项都没有匹配上就会执行</p><p>4、break 结束整个switch语句，如果没有 break 会发生 case穿透，这种现象你可以利用</p><p>5、switch语句的结束条件：遇到break就结束了或者执行到末尾结束</p></blockquote><p>案例一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">int x = 2;</span><br><span class="line">int y = 3;</span><br><span class="line">switch(x)&#123;</span><br><span class="line">default:</span><br><span class="line">y++;</span><br><span class="line">case 3:</span><br><span class="line">y++;</span><br><span class="line">case 4:</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;y=&quot;+y);//6</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">int x = 2;</span><br><span class="line">int y = 3;</span><br><span class="line">switch(x)&#123;</span><br><span class="line">default:</span><br><span class="line">y++;</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">y++;</span><br><span class="line">case 4:</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;y=&quot;+y); // 4</span><br></pre></td></tr></table></figure><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>循环结构包括for循环、while循环和do…while循环</p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(初始化表达式语句;判断条件语句;控制条件语句) &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><pre><code>a:执行初始化表达式语句b:执行判断条件语句,看其返回值是true还是false，如果是true，就继续执行，如果是false，就结束循环c:执行循环体语句d:执行控制条件语句e:回到b继续执行</code></pre><p>注意：初始化表达式语句只执行一次</p><p>案例：打印1~100的数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(int i=1; i&lt;=100; i++)&#123;</span><br><span class="line">    System.out.println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while(判断条件语句) &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">控制条件语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：先判断条件语句是否为true，若为true，则进入大括号执行循环语句和控制条件语句</p><p>案例：求1—100之间的和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int i=1;</span><br><span class="line">int sum=0;</span><br><span class="line">while (j&lt;=100)&#123;</span><br><span class="line">   sum+=j;</span><br><span class="line">   j++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;和是 &quot;+sum);</span><br></pre></td></tr></table></figure><h3 id="do-…while循环"><a href="#do-…while循环" class="headerlink" title="do …while循环"></a>do …while循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">控制条件语句;</span><br><span class="line">&#125;while(判断条件语句);</span><br></pre></td></tr></table></figure><p>执行流程：先执行do里面的代码一次，然后再去判断，while括号里面的条件是否成立，如果成立，就继续执行{}里面的语句，如果条件不成立，则循环结束</p><p>案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int i=2;</span><br><span class="line">do&#123;</span><br><span class="line">    System.out.println(&quot;你好&quot;);</span><br><span class="line">    i--;</span><br><span class="line">&#125;while (i&gt;2); </span><br><span class="line">//执行一次do里面的代码</span><br></pre></td></tr></table></figure><p><strong>三种循环语句的区别</strong></p><p>(1): do…while循环至少执行一次循环体。而for,while循环必须先判断条件是否成立，然后决定是否执行循环体语句。</p><p>(2): 如果你想在循环结束后，继续使用控制条件的那个变量，用while循环，否则用for循环。</p><p><strong>死循环</strong></p><p>当控制条件语句控制的那个变量丢失时，循环结构可能进入死循环</p><p>两种最简单的死循环格式:</p><p>​    while(true){…}</p><p>​    for(; ; ){…}</p><h1 id="控制跳转语句"><a href="#控制跳转语句" class="headerlink" title="控制跳转语句"></a>控制跳转语句</h1><p>什么是控制跳转语句：Java中的goto是保留字，目前不能使用。虽然没有goto语句可以增强程序的安全性，但是也带来很多不便， 比如想在某个循环执行到某一步的时候就结束，现在就做不了这件事情。为了弥补这个缺陷，Java就提供了break（中断），continue（继续）和return（返回）来实现控制语句的跳转和中断</p><ul><li><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p>(1):在选择结构switch语句中</p><p>(2):在循环语句中</p><p>​    作用：常用于退出单层循环</p><p>​    注意：离开使用场景的存在是没有意义的</p></li><li><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><p>​    在循环语句中</p><p>​    作用：跳出一次循环，执行下一步操作</p><p>​    注意：离开使用场景的存在是没有意义的</p><p>案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for(int x=1; x&lt;=10; x++) &#123;</span><br><span class="line">if(x%3==0) &#123;</span><br><span class="line">//在此处填写代码</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(“Java”);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//我想在控制台输出2次:“Java“----braak;</span><br><span class="line">//我想在控制台输出7次:“Java“----continue;</span><br><span class="line">//我想在控制台输出13次:“Java“----System.out.println(“Java”);</span><br></pre></td></tr></table></figure></li><li><h2 id="return"><a href="#return" class="headerlink" title="return"></a>return</h2><p>​    作用：return 就是退出一个方法</p></li></ul><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>​    为了解决代码重复编写的问题，可以将一个功能的代码提取出来放在一个{}中，并为这段代码起个名字，所提取出来的代码可以被看作是程序中定义的一个方法，就是对一段功能逻辑的封装，以实现重复调用。</p><ul><li>格式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型 参数名1，参数类型 参数名2 …)&#123;</span><br><span class="line">    方法体;</span><br><span class="line">    return 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>举例：定义一个方法求1~n的和并返回值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static int getSum(int n)&#123;</span><br><span class="line">int sum=0;</span><br><span class="line">    for(int i = 1; i&lt;=n; i++)&#123;</span><br><span class="line">sum+=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;&#125;</span><br></pre></td></tr></table></figure><p>主方法是一个程序的入口，主方法是JVM来调用的，一个类中只能有一个主方法</p><ul><li>实参与形参</li></ul><p>实参：调用方法时，传入的参数，叫做实际参数，简称实参，传常量，变量都可以。</p><p>形参：定义方法括号里面的参数，叫做形式参数，简称形参。形参的作用是，调用方法时，接收传过来的实参，多个形参你用逗号隔开。</p><ul><li>注意</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方法不调用不执行</span><br><span class="line">方法与方法是平级关系，不能嵌套定义</span><br><span class="line">方法定义的时候参数之间用逗号隔开</span><br><span class="line">方法调用的时候不用在传递数据类型</span><br><span class="line">如果方法有明确的返回值，一定要由return带回一个值</span><br></pre></td></tr></table></figure><ul><li>案例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//  需求：根据键盘录入的数据输出对应的乘法表</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class MyTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        System.out.println(&quot;请输入一个行数&quot;);</span><br><span class="line">        int i = sc.nextInt();</span><br><span class="line">        //调用方法</span><br><span class="line">        showChengFaBiao(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void showChengFaBiao(int a) &#123;</span><br><span class="line">        for (int i = 1; i &lt;= a; i++) &#123;</span><br><span class="line">            for (int j = 1; j &lt;= i; j++) &#123;</span><br><span class="line">                System.out.print(j + &quot;*&quot; + i + &quot;=&quot; + (j * i) + &quot;\t&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h1><p>在同一个类中，允许存在一个以上的同名方法，只要它们的参数列表不同（参数个数或者参数类型不同），与返回值无关。调用的时候，会根据参数个数和参数类型去匹配。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">private static int add(int i, int i1) &#123;</span><br><span class="line">        System.out.println(&quot;两个int参数方法调用了&quot;);</span><br><span class="line">        return i + i1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static double add(int i, double i1) &#123;</span><br><span class="line">        System.out.println(&quot;一个int 一个double调用了&quot;);</span><br><span class="line">        return i + i1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static int add(int i, int i1, int i2, int i3) &#123;</span><br><span class="line"></span><br><span class="line">        return i + i1 + i2 + i3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static int add(int i, int i1, int i2) &#123;</span><br><span class="line"></span><br><span class="line">        return i + i1 + i2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;键盘录入&quot;&gt;&lt;a href=&quot;#键盘录入&quot; class=&quot;headerlink&quot; title=&quot;键盘录入&quot;&gt;&lt;/a&gt;键盘录入&lt;/h1&gt;&lt;p&gt;1、在类（class）上面导包&lt;/p&gt;
&lt;p&gt;​    格式：&lt;/p&gt;
&lt;figure class=&quot;highlight p
      
    
    </summary>
    
      <category term="JavaSE" scheme="https://sombra002.github.io/categories/JavaSE/"/>
    
    
  </entry>
  
  <entry>
    <title>进制、常量、变量、数据类型、运算符</title>
    <link href="https://sombra002.github.io/2019/04/02/%E8%BF%9B%E5%88%B6%E3%80%81%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://sombra002.github.io/2019/04/02/进制、常量、变量、数据类型、运算符/</id>
    <published>2019-04-02T04:37:45.000Z</published>
    <updated>2019-04-29T08:51:57.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h1><p>二进制：由0、1组成，逢二进一，以0b开头，</p><p>八进制：由0~7组成，逢八进一，以0开头</p><p>十进制：由0~9组成，逢十进一，默认是十进制</p><p>十六进制：由0-9,A-F组成，逢十六进一，以0X开头</p><p>案例：输出不同进制表现10的数据<br>二进制：0b10<br>八进制：010<br>十进制：10<br>十六进制：0x10</p><h1 id="任意进制到十进制的转换"><a href="#任意进制到十进制的转换" class="headerlink" title="任意进制到十进制的转换"></a>任意进制到十进制的转换</h1><p>规则：系数*基数^权数次幂相加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">二进制转换为十进制：0b101----&gt; 1*2^0+0*2^1+1*2^2=5</span><br></pre></td></tr></table></figure><p>其他进制转换到十进制以此类推</p><h1 id="十进制到任意进制的转换"><a href="#十进制到任意进制的转换" class="headerlink" title="十进制到任意进制的转换"></a>十进制到任意进制的转换</h1><p>规则：除基取余 直到商为0 余数反转</p><p>十进制转换为二进制：</p><p>5/2商2余1</p><p>2/2商1余0</p><p>1/2商0余1</p><p>余数反转（自下而上）的二进制为:0b101</p><h1 id="原码-反码-补码"><a href="#原码-反码-补码" class="headerlink" title="原码 反码 补码"></a>原码 反码 补码</h1><p>原码：即二进制定点表示法</p><p>反码：正数的反码与其原码相同；负数的反码是除符号位外对其逐位取反</p><p>补码：正数的补码与其原码相同；负数的补码是在其反码的末位加1</p><p>案例：</p><p>​    原码：1001011</p><p>​    反码：1110100（除符号位外对位取反）</p><p>​    补码：1110101（反码加1）</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h2><ul><li>在程序执行的过程中，在某个范围内其值可以发生改变的量，定义一个变量，其实就是开辟了一个内存空间</li><li>变量本质上是内存中的一块空间，这块空间“有数据类型”、“有名字”、“有字面值”</li><li>变量包括：数据类型  名字  字面值；</li><li>变量是内存中存储数据的最基本的单元</li></ul><h2 id="数据类型的作用：指导数据在内存中开辟多大的空间"><a href="#数据类型的作用：指导数据在内存中开辟多大的空间" class="headerlink" title="数据类型的作用：指导数据在内存中开辟多大的空间"></a>数据类型的作用：指导数据在内存中开辟多大的空间</h2><ul><li>不同的数据有不同的类型，不同的数据类型底层会分配不同大小的空间</li><li>数据类型是指导程序在运行阶段应该分配多大的内存空间</li><li><strong>变量要求：变量中存储的具体的“数据”必须和变量的“数据类型”一致</strong></li></ul><h2 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h2><ul><li>数据类型 变量名 = 变量值   </li></ul><h2 id="变量声明后怎么赋值"><a href="#变量声明后怎么赋值" class="headerlink" title="变量声明后怎么赋值"></a>变量声明后怎么赋值</h2><p>变量名 = 字面值；</p><p>=等号是一个运算符，叫做赋值运算符，赋值运算符先运算等号右边的表达式，表达式执行结束后的结果赋值给左边的变量。</p><p>声明和赋值可以放到一起完成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int i = 10；</span><br></pre></td></tr></table></figure><h2 id="变量赋值之后可以重新赋值，变量的值可变化"><a href="#变量赋值之后可以重新赋值，变量的值可变化" class="headerlink" title="变量赋值之后可以重新赋值，变量的值可变化"></a>变量赋值之后可以重新赋值，变量的值可变化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int i = 10；</span><br><span class="line">System.out.println(i);   //10</span><br><span class="line">i = 20;</span><br><span class="line">System.out.println(i);   //20</span><br><span class="line">i = 30;</span><br><span class="line">System.out.println(i);  //30</span><br></pre></td></tr></table></figure><p><strong>有了变量的概念之后，内存空间得到了重复的使用</strong></p><h2 id="通常访问一个变量包括两种访问形式"><a href="#通常访问一个变量包括两种访问形式" class="headerlink" title="通常访问一个变量包括两种访问形式"></a>通常访问一个变量包括两种访问形式</h2><ul><li>第一种：读取变量中保存的具体数据  get/获取</li><li>第二种：修改变量中保存的具体数据  set/设置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i = 20;  //set</span><br><span class="line">System.out.println(i); //get</span><br></pre></td></tr></table></figure><h2 id="变量在一行上可以声明多个"><a href="#变量在一行上可以声明多个" class="headerlink" title="变量在一行上可以声明多个"></a>变量在一行上可以声明多个</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int a,b,c</span><br><span class="line">//一行上可以同时声明多个变量 </span><br><span class="line">int a,b,c=300;</span><br><span class="line">//这一行说明只是给c赋值了，a,b并没有</span><br></pre></td></tr></table></figure><h2 id="变量必须先声明，再赋值，才能访问"><a href="#变量必须先声明，再赋值，才能访问" class="headerlink" title="变量必须先声明，再赋值，才能访问"></a>变量必须先声明，再赋值，才能访问</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Varible &#123;</span><br><span class="line">    public static void main (String[] args)&#123;</span><br><span class="line">         int i； //程序执行到这里，内存空间没有开辟出来，变量i并没有初始化</span><br><span class="line">         //所以没有赋值之前是无法访问的</span><br><span class="line">        // System.out.println(i);   //编译报错</span><br><span class="line">         </span><br><span class="line">         //给i赋值，完成初始化，内存开辟</span><br><span class="line">         i = 100；</span><br><span class="line">         System.out.println(i);//100                </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量的分类"><a href="#变量的分类" class="headerlink" title="*变量的分类"></a>*变量的分类</h3><p><strong>根据变量声明的位置来分类：</strong></p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>​        在方法体当中声明的变量叫做局部变量</p><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><p>​        在方法体外（类体内）声明的变量叫成员变量</p><ul><li><strong>在不同作用域中，变量名可以相同，就近原则</strong></li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul><li><p>不同数据数据类型的数据占用空间大小不同。</p></li><li><p>数据类型作用是指导JVM在运行程序时给数据分配多大的内存空间。</p></li><li><p>Java中数据类型的分类：</p></li></ul><p>​        基本数据类型</p><p>​        引用数据类型</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="整数型"><a href="#整数型" class="headerlink" title="整数型"></a>整数型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">类型          字节数范围</span><br><span class="line">byte  1(8bit)       -128  ~  127</span><br><span class="line">short 2(16bit)   -2^15 ~  2^15 - 1</span><br><span class="line">int 4(32bit)      -2^31 ~  2^31 - 1</span><br><span class="line">long 8(64bit)      -2^63 ~  2^63 - 1</span><br></pre></td></tr></table></figure><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">类型          字节数            范围</span><br><span class="line">float       4(32bit)      -3.403*10^38  ~ 3.403*10^38</span><br><span class="line">double     8(64bit)  -1.798*10^308 ~1.798*10^308</span><br></pre></td></tr></table></figure><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类型          字节数            范围</span><br><span class="line">char       2(16bit)   0 ~ 2^16 - 1 = 65535</span><br></pre></td></tr></table></figure><p>​    <strong>换行符   \n</strong></p><p><strong>制表符 \t</strong></p><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类型          字节数    </span><br><span class="line">boolean        1</span><br></pre></td></tr></table></figure><p> <strong>整数默认是int类型的 ， 浮点数默认是 double类型的</strong> </p><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><p>如数组，接口，类等</p><p>注意：</p><p>​    未初始化的变量不能使用<br>​    同一作用域内不能有两个同名变量<br>​    同一行可定义多个变量，但不建议</p><h1 id="java数据类型的自动类型提升与强制转换"><a href="#java数据类型的自动类型提升与强制转换" class="headerlink" title="java数据类型的自动类型提升与强制转换"></a>java数据类型的自动类型提升与强制转换</h1><h2 id="自动类型提升"><a href="#自动类型提升" class="headerlink" title="自动类型提升"></a>自动类型提升</h2><p>byte short char 在参与数学运算时，会自动提升为int类型，如果还有long ,float double 参与运算则会相应的提升为 long float double ,布尔类型不参与数学运算，byte short char 之间不发生转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">byte a=10;</span><br><span class="line">short b=20;</span><br><span class="line">byte num=a+b;  //报错,在运算时会转换为int类型，byte类型的num装不下int类型的数据</span><br><span class="line"></span><br><span class="line">a=a+1;//报错，1为int类型</span><br></pre></td></tr></table></figure><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>强制将一个数据，转换成我们要的数据类型，强制类型转换，<em>有可能会发生精度损失的问题</em></p><p>格式：目标数据类型 变量名=(目标数据类型)(被转换的数据);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">byte a = 1;</span><br><span class="line">byte b = 127;</span><br><span class="line">short c =(short) a+b;//运算时虽然自动转换为int类型，但强制转换为short，且128在short数据类型范围内，此处不会发生精度损失</span><br><span class="line">byte c = (byte)128;//输出-128</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">byte a=10;</span><br><span class="line">byte b=20;</span><br><span class="line">byte r=a+1;  //报错，int转为byte可能发生精度损失</span><br><span class="line">byte rr=3+4; //不会报错 常量优化机制，多个常量相加时，他会先算出结果，看没有在这个数据类型的范围内，如果在，就不报错,如果不在就会报错</span><br><span class="line">char ch=&apos;爱&apos;;  //char 占两个字节，gbk编码一个汉字占两个字节  ANSI 也是一个汉字占两个字节，UTF8 一个汉字占三个字节的</span><br></pre></td></tr></table></figure><h1 id="字符和字符串参与运算"><a href="#字符和字符串参与运算" class="headerlink" title="字符和字符串参与运算"></a>字符和字符串参与运算</h1><p><strong>ASCII码表中: ‘a’97 ‘A’ 65 ‘0’ 48</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char ch = &apos;a&apos;;</span><br><span class="line">char ch2 = ch+1;//报错，从int转换到char可能会有精度损失</span><br><span class="line">int r = ch+1;//不报错，输出98</span><br></pre></td></tr></table></figure><p><strong>当+号运算两端只要任意一端是一个字符串，那么加号就起连接符的作用，就会将两端的内容拼接起来，形成一个新的字符串</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(&quot;Hello World!&quot;+100); //&quot;Hello World!100&quot;</span><br><span class="line">System.out.println(&quot;Hello World!&quot;+100+86);//&quot;Hello World!10086&quot;</span><br><span class="line">System.out.println(&quot;Hello World!&quot;+&quot;10086&quot;);// &quot;Hello World!10086&quot;System.out.println(10086+&quot;Hello World!&quot;);//&quot;10086Hello World!&quot;</span><br><span class="line">System.out.println(100+&quot;Hello World!&quot;+100+86);//100Hello World!10086</span><br><span class="line">System.out.println(100+86+&quot;Hello World!&quot;+100+86); //186HelloWorld!10086</span><br><span class="line">System.out.println(&quot;5+5=&quot;+5+5);//&quot;5+5=55&quot;</span><br><span class="line">System.out.println(5+5+&quot;=5+5&quot;);//&quot;10=5+5&quot;</span><br></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><ul><li><p>什么是运算符:对常量和变量进行操作的符号称为运算符</p></li><li><p>运算符的分类:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">算术运算符</span><br><span class="line">赋值运算符</span><br><span class="line">比较运算符</span><br><span class="line">逻辑运算符</span><br><span class="line">位运算符</span><br><span class="line">三目运算符</span><br></pre></td></tr></table></figure><p>注意事项：</p><pre><code>a:整数相除只能得到整数。如果想得到小数，请使用浮点数b:/获取的是除法操作的商，%获取的是除法操作的余数  %运算结果的符号，取决于参与运算是左边的符号。  </code></pre></li></ul><h1 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h1><ul><li>算数运算符有哪些:+ , - , * , / , % , ++ , –</li></ul><p>/：整数相除只能得到整数，要得到小数需使用服浮点数</p><p>++:自加,对原有的数据进行+1<br>–:自减,对原有的数据进行-1</p><p>++,–运算符单独使用：放在操作数的前面和后面效果一样</p><p>++,–参与运算时使用：放在操作数的前面，先自增或者自减，然后再参与运算</p><p>放在操作数的后面，先参与运算，再自增或者自减</p><p>案例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int a = 3;</span><br><span class="line">a++;//此处a=4</span><br><span class="line">++a;//此处a=5</span><br><span class="line">a--;//a=4</span><br><span class="line">--a;//a=3</span><br><span class="line">int num = a++;  //num=3  a=4</span><br><span class="line">int num2 = ++a;  //num2=5  a=5</span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>赋值运算符有哪些：=， +=,-=,*=,/=,%=</p><p>案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">byte b =3;</span><br><span class="line">b = b+1;  //报错</span><br><span class="line">b+=1;  //不报错，会自动强制类型转换，然后判断累加完的结果，在不在这个数据类型的范围内，如果不在会自动强制类型转换</span><br></pre></td></tr></table></figure><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>关系运算符有哪些：== ,!= , &lt; , &gt; , &lt;= , &gt;=</p><p>关系运算符运算结果是booean型</p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符有哪些：&amp;(并且) , |(或者) , !(非) , ^(异或) , &amp;&amp;(短路与) , ||(短路或)</p><p>逻辑运算符运算结果是booean型</p><p>&amp;(并且) , |(或者) 和 &amp;&amp;(短路与) ,||(短路或) 在运算结果上没有区别，区别在运算效率上：&amp;，运算符两端都会计算，而&amp;&amp;，||只要左端能得出计算结果，则不会执行右端</p><p>案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int a = 1;</span><br><span class="line">int b = 2;</span><br><span class="line">boolean flag = a==2 &amp;&amp; (a&gt;b);//&amp;&amp;左端已经为false，则右端不会再进行判断</span><br><span class="line">System.out.println()</span><br></pre></td></tr></table></figure><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>语法：布尔表达式?结果1:结果2</p><p>案例：求两个数最大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a = 1;</span><br><span class="line">int b = 2;</span><br><span class="line">int max = a&gt;b?a:b;</span><br></pre></td></tr></table></figure><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位运算符有哪些：</p><p>​        &amp;(与)，|(或)，^(异或) , ~(按位取反) , &lt;&lt;(左移) ,&gt;&gt;(右移) ,&gt;&gt;&gt;(无符号右移)</p><p>&amp;:有0则0<br>|:有1则1<br>^:相同则0，不同则1<br>~:按位取反 0变1 1变0</p><p>&lt;&lt; : 把&lt;&lt;左边的数据乘以2的移动次幂 例如 10&lt;&lt;3 结果 10*2^3=80</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int flag = 1&amp;2;  //0</span><br><span class="line">int flag = 1|2;  //3</span><br><span class="line">int flag = ~3;  //-4</span><br><span class="line">int num = 3&gt;&gt;2;  //3/2^2=0</span><br><span class="line">int num = 3&lt;&lt;2;  //3*2^2=12</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;进制&quot;&gt;&lt;a href=&quot;#进制&quot; class=&quot;headerlink&quot; title=&quot;进制&quot;&gt;&lt;/a&gt;进制&lt;/h1&gt;&lt;p&gt;二进制：由0、1组成，逢二进一，以0b开头，&lt;/p&gt;
&lt;p&gt;八进制：由0~7组成，逢八进一，以0开头&lt;/p&gt;
&lt;p&gt;十进制：由0~9组成，逢
      
    
    </summary>
    
      <category term="JavaSE" scheme="https://sombra002.github.io/categories/JavaSE/"/>
    
    
  </entry>
  
  <entry>
    <title>Java简介、注释、、常见DOS命令</title>
    <link href="https://sombra002.github.io/2019/04/01/Java%E7%AE%80%E4%BB%8B%E3%80%81%E6%B3%A8%E9%87%8A%E3%80%81%E3%80%81%E5%B8%B8%E8%A7%81DOS%E5%91%BD%E4%BB%A4/"/>
    <id>https://sombra002.github.io/2019/04/01/Java简介、注释、、常见DOS命令/</id>
    <published>2019-04-01T04:25:38.000Z</published>
    <updated>2019-04-29T05:31:13.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、DOS常用命令"><a href="#一、DOS常用命令" class="headerlink" title="一、DOS常用命令"></a>一、DOS常用命令</h1><table><thead><tr><th>DOS命令</th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>cd + 目录名</td><td>进入该目录</td></tr><tr><td>cd…</td><td>回退上一级目录</td></tr><tr><td>cd…/…/</td><td>回退上两级目录</td></tr><tr><td>cd /盘符 + 完整路径名</td><td>跨盘操作</td></tr><tr><td>md + 目录名</td><td>新建一个目录</td></tr><tr><td>rd + 目录名</td><td>删除一个空目录</td></tr><tr><td>rd /s + 目录名</td><td>删除非空目录，删除前会确认是否删除</td></tr><tr><td>rd /s /q + 目录名</td><td>删除非空目录，直接删除</td></tr><tr><td>del + 文件名.后缀名</td><td>删除该文件</td></tr><tr><td>del + *.后缀名</td><td>删除该目录下所有该后缀名的文件</td></tr><tr><td>mspaint</td><td>打开画图</td></tr><tr><td>calc</td><td>打开计算器</td></tr><tr><td>cls</td><td>清屏</td></tr><tr><td>exit</td><td>退出</td></tr><tr><td>hsotname</td><td>查看主机名</td></tr><tr><td>ipconfig</td><td>查看IP地址</td></tr><tr><td>shutdow -s -t 0</td><td>在0秒后关机</td></tr></tbody></table><h1 id="二、JDK-JRE-JVM"><a href="#二、JDK-JRE-JVM" class="headerlink" title="二、JDK JRE JVM"></a>二、JDK JRE JVM</h1><p>JDK：java开发工具包，提供给开发人员编写java程序<br>JRE：java运行环境，源代码由JRE运行<br>JVM：java虚拟机，实现跨平台<br>注：JDK包含JRE，使用JDK开发java程序，交给JRE运行，由JVM实现跨平台</p><h1 id="三、Java的三种注释"><a href="#三、Java的三种注释" class="headerlink" title="三、Java的三种注释"></a>三、Java的三种注释</h1><p>//单行注释</p><p>/<em><br>多行注释</em>/</p><p>/*<em><br>文档注释</em>/</p><h1 id="四、标识符"><a href="#四、标识符" class="headerlink" title="四、标识符"></a>四、标识符</h1><p>给类，变量等起的名字<br>不能以数字开头<br>可使用的符号：_ $<br>见名知意<br>给类命名首字母大写，多个字母采用驼峰式命名，如StudentName</p><h1 id="五、常量"><a href="#五、常量" class="headerlink" title="五、常量"></a>五、常量</h1><p>定义：在程序中值不会发生的量称作常量，分为字面值常量和自定义常量<br>字面值常量：</p><p>整数常量（1 2 3…）<br>小数常量（1.1 …）<br>字符常量（‘a’ ‘A’ ‘1’…）注：单引号括起来的一个字符<br>字符串常量（“String” “1” “A”）注：用双引号括起来的一个或多个字符<br>布尔常量（true false）</p><p>空常量（null）</p><h1 id="六、关键字的概述和使用"><a href="#六、关键字的概述和使用" class="headerlink" title="六、关键字的概述和使用"></a>六、关键字的概述和使用</h1><p>A:什么是关键字<br>    就是被java语言赋予特殊含义的单词。<br>B:关键字的特点<br>    组成关键的字母都是小写<br>C:常见关键字<br>    class,public,static,void …..<br>D:关键字的注意事项<br>    (1): goto和const是java语言的保留字<br>    (2): 类似与editplus这样的高级文本编辑器对关键字都是有颜色变化的</p><h1 id="七、标识符的概述和组成规则"><a href="#七、标识符的概述和组成规则" class="headerlink" title="七、标识符的概述和组成规则"></a>七、标识符的概述和组成规则</h1><p>“见名知意”<br>A:什么是标识符<br>    就是给类,接口,方法,变量,常量等起名字时使用的字符序列<br>B:标识符的组成规则<br>    (1): 英文的大小写字母<br>    (2): 数字字符<br>    (3): $和_<br>C:标识符注意事项<br>    (1): 不能以数字开头<br>    (2): 不能是java中的关键字<br>    (3): 区分大小写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、DOS常用命令&quot;&gt;&lt;a href=&quot;#一、DOS常用命令&quot; class=&quot;headerlink&quot; title=&quot;一、DOS常用命令&quot;&gt;&lt;/a&gt;一、DOS常用命令&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;DOS命令&lt;/th&gt;
&lt;th&gt;&lt;stro
      
    
    </summary>
    
      <category term="JavaSE" scheme="https://sombra002.github.io/categories/JavaSE/"/>
    
    
  </entry>
  
  <entry>
    <title>欢迎访问我的博客！</title>
    <link href="https://sombra002.github.io/2019/03/01/hello-world/"/>
    <id>https://sombra002.github.io/2019/03/01/hello-world/</id>
    <published>2019-03-01T04:25:38.000Z</published>
    <updated>2019-04-29T05:21:44.306Z</updated>
    
    <content type="html"><![CDATA[<p>技术博客、人生感悟、随便写写。</p><p>大家笑一笑就好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;技术博客、人生感悟、随便写写。&lt;/p&gt;
&lt;p&gt;大家笑一笑就好！&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
