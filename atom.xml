<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赵泳智</title>
  
  <subtitle>这个世界会好的！：）</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sombra002.github.io/"/>
  <updated>2019-04-29T05:23:20.225Z</updated>
  <id>https://sombra002.github.io/</id>
  
  <author>
    <name>赵泳智</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>键盘录入数据、流程控制语句</title>
    <link href="https://sombra002.github.io/2019/04/29/%E9%94%AE%E7%9B%98%E5%BD%95%E5%85%A5%E6%95%B0%E6%8D%AE%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <id>https://sombra002.github.io/2019/04/29/键盘录入数据、流程控制语句/</id>
    <published>2019-04-29T05:20:01.000Z</published>
    <updated>2019-04-29T05:23:20.225Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="JavaSE" scheme="https://sombra002.github.io/categories/JavaSE/"/>
    
    
  </entry>
  
  <entry>
    <title>进制、常量、变量、数据类型、运算符</title>
    <link href="https://sombra002.github.io/2019/04/02/%E8%BF%9B%E5%88%B6%E3%80%81%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://sombra002.github.io/2019/04/02/进制、常量、变量、数据类型、运算符/</id>
    <published>2019-04-02T04:37:45.000Z</published>
    <updated>2019-04-29T05:20:26.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h1><p>二进制：由0、1组成，逢二进一，以0b开头，</p><p>八进制：由0~7组成，逢八进一，以0开头</p><p>十进制：由0~9组成，逢十进一，默认是十进制</p><p>十六进制：由0-9,A-F组成，逢十六进一，以0X开头</p><p>案例：输出不同进制表现10的数据<br>二进制：0b10<br>八进制：010<br>十进制：10<br>十六进制：0x10</p><h1 id="任意进制到十进制的转换"><a href="#任意进制到十进制的转换" class="headerlink" title="任意进制到十进制的转换"></a>任意进制到十进制的转换</h1><p>规则：系数*基数^权数次幂相加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">二进制转换为十进制：0b101----&gt; 1*2^0+0*2^1+1*2^2=5</span><br></pre></td></tr></table></figure><p>其他进制转换到十进制以此类推</p><h1 id="十进制到任意进制的转换"><a href="#十进制到任意进制的转换" class="headerlink" title="十进制到任意进制的转换"></a>十进制到任意进制的转换</h1><p>规则：除基取余 直到商为0 余数反转</p><p>十进制转换为二进制：</p><p>5/2商2余1</p><p>2/2商1余0</p><p>1/2商0余1</p><p>余数反转（自下而上）的二进制为:0b101</p><h1 id="原码-反码-补码"><a href="#原码-反码-补码" class="headerlink" title="原码 反码 补码"></a>原码 反码 补码</h1><p>原码：即二进制定点表示法</p><p>反码：正数的反码与其原码相同；负数的反码是除符号位外对其逐位取反</p><p>补码：正数的补码与其原码相同；负数的补码是在其反码的末位加1</p><p>案例：</p><p>​    原码：1001011</p><p>​    反码：1110100（除符号位外对位取反）</p><p>​    补码：1110101（反码加1）</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul><li>什么是变量：在程序执行的过程中，在某个范围内其值可以发生改变的量，定义一个变量，其实就是开辟了一个内存空间</li><li>定义格式：数据类型 变量名 = 变量值   </li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>Java中数据类型的分类：</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="整数型"><a href="#整数型" class="headerlink" title="整数型"></a>整数型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">类型          字节数范围</span><br><span class="line">byte  1(8bit)       -128  ~  127</span><br><span class="line">short 2(16bit)   -2^15 ~  2^15 - 1</span><br><span class="line">int 4(32bit)      -2^31 ~  2^31 - 1</span><br><span class="line">long 8(64bit)      -2^63 ~  2^63 - 1</span><br></pre></td></tr></table></figure><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">类型          字节数            范围</span><br><span class="line">float       4(32bit)      -3.403*10^38  ~ 3.403*10^38</span><br><span class="line">double     8(64bit)  -1.798*10^308 ~1.798*10^308</span><br></pre></td></tr></table></figure><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类型          字节数            范围</span><br><span class="line">char       2(16bit)   0 ~ 2^16 - 1 = 65535</span><br></pre></td></tr></table></figure><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类型          字节数    </span><br><span class="line">boolean        1</span><br></pre></td></tr></table></figure><p>整数默认是int类型的 ， 浮点数默认是 double类型的</p><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><p>如数组，接口，类等</p><p>注意：</p><p>​    未初始化的变量不能使用<br>​    同一作用域内不能有两个同名变量<br>​    同一行可定义多个变量，但不建议</p><h1 id="java数据类型的自动类型提升与强制转换"><a href="#java数据类型的自动类型提升与强制转换" class="headerlink" title="java数据类型的自动类型提升与强制转换"></a>java数据类型的自动类型提升与强制转换</h1><h2 id="自动类型提升"><a href="#自动类型提升" class="headerlink" title="自动类型提升"></a>自动类型提升</h2><p>byte short char 在参与数学运算时，会自动提升为int类型，如果还有long ,float double 参与运算则会相应的提升为 long float double ,布尔类型不参与数学运算，byte short char 之间不发生转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">byte a=10;</span><br><span class="line">short b=20;</span><br><span class="line">byte num=a+b;  //报错,在运算时会转换为int类型，byte类型的num装不下int类型的数据</span><br><span class="line"></span><br><span class="line">a=a+1;//报错，1为int类型</span><br></pre></td></tr></table></figure><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>强制将一个数据，转换成我们要的数据类型，强制类型转换，<em>有可能会发生精度损失的问题</em></p><p>格式：目标数据类型 变量名=(目标数据类型)(被转换的数据);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">byte a = 1;</span><br><span class="line">byte b = 127;</span><br><span class="line">short c =(short) a+b;//运算时虽然自动转换为int类型，但强制转换为short，且128在short数据类型范围内，此处不会发生精度损失</span><br><span class="line">byte c = (byte)128;//输出-128</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">byte a=10;</span><br><span class="line">byte b=20;</span><br><span class="line">byte r=a+1;  //报错，int转为byte可能发生精度损失</span><br><span class="line">byte rr=3+4; //不会报错 常量优化机制，多个常量相加时，他会先算出结果，看没有在这个数据类型的范围内，如果在，就不报错,如果不在就会报错</span><br><span class="line">char ch=&apos;爱&apos;;  //char 占两个字节，gbk编码一个汉字占两个字节  ANSI 也是一个汉字占两个字节，UTF8 一个汉字占三个字节的</span><br></pre></td></tr></table></figure><h1 id="字符和字符串参与运算"><a href="#字符和字符串参与运算" class="headerlink" title="字符和字符串参与运算"></a>字符和字符串参与运算</h1><p><strong>ASCII码表中: ‘a’97 ‘A’ 65 ‘0’ 48</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char ch = &apos;a&apos;;</span><br><span class="line">char ch2 = ch+1;//报错，从int转换到char可能会有精度损失</span><br><span class="line">int r = ch+1;//不报错，输出98</span><br></pre></td></tr></table></figure><p><strong>当+号运算两端只要任意一端是一个字符串，那么加号就起连接符的作用，就会将两端的内容拼接起来，形成一个新的字符串</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(&quot;Hello World!&quot;+100); //&quot;Hello World!100&quot;</span><br><span class="line">System.out.println(&quot;Hello World!&quot;+100+86);//&quot;Hello World!10086&quot;</span><br><span class="line">System.out.println(&quot;Hello World!&quot;+&quot;10086&quot;);// &quot;Hello World!10086&quot;System.out.println(10086+&quot;Hello World!&quot;);//&quot;10086Hello World!&quot;</span><br><span class="line">System.out.println(100+&quot;Hello World!&quot;+100+86);//100Hello World!10086</span><br><span class="line">System.out.println(100+86+&quot;Hello World!&quot;+100+86); //186HelloWorld!10086</span><br><span class="line">System.out.println(&quot;5+5=&quot;+5+5);//&quot;5+5=55&quot;</span><br><span class="line">System.out.println(5+5+&quot;=5+5&quot;);//&quot;10=5+5&quot;</span><br></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><ul><li><p>什么是运算符:对常量和变量进行操作的符号称为运算符</p></li><li><p>运算符的分类:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">算术运算符</span><br><span class="line">赋值运算符</span><br><span class="line">比较运算符</span><br><span class="line">逻辑运算符</span><br><span class="line">位运算符</span><br><span class="line">三目运算符</span><br></pre></td></tr></table></figure><p>注意事项：</p><pre><code>a:整数相除只能得到整数。如果想得到小数，请使用浮点数b:/获取的是除法操作的商，%获取的是除法操作的余数  %运算结果的符号，取决于参与运算是左边的符号。  </code></pre></li></ul><h1 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h1><ul><li>算数运算符有哪些:+ , - , * , / , % , ++ , –</li></ul><p>/：整数相除只能得到整数，要得到小数需使用服浮点数</p><p>++:自加,对原有的数据进行+1<br>–:自减,对原有的数据进行-1</p><p>++,–运算符单独使用：放在操作数的前面和后面效果一样</p><p>++,–参与运算时使用：放在操作数的前面，先自增或者自减，然后再参与运算</p><p>放在操作数的后面，先参与运算，再自增或者自减</p><p>案例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int a = 3;</span><br><span class="line">a++;//此处a=4</span><br><span class="line">++a;//此处a=5</span><br><span class="line">a--;//a=4</span><br><span class="line">--a;//a=3</span><br><span class="line">int num = a++;  //num=3  a=4</span><br><span class="line">int num2 = ++a;  //num2=5  a=5</span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>赋值运算符有哪些：=， +=,-=,*=,/=,%=</p><p>案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">byte b =3;</span><br><span class="line">b = b+1;  //报错</span><br><span class="line">b+=1;  //不报错，会自动强制类型转换，然后判断累加完的结果，在不在这个数据类型的范围内，如果不在会自动强制类型转换</span><br></pre></td></tr></table></figure><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>关系运算符有哪些：== ,!= , &lt; , &gt; , &lt;= , &gt;=</p><p>关系运算符运算结果是booean型</p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符有哪些：&amp;(并且) , |(或者) , !(非) , ^(异或) , &amp;&amp;(短路与) , ||(短路或)</p><p>逻辑运算符运算结果是booean型</p><p>&amp;(并且) , |(或者) 和 &amp;&amp;(短路与) ,||(短路或) 在运算结果上没有区别，区别在运算效率上：&amp;，运算符两端都会计算，而&amp;&amp;，||只要左端能得出计算结果，则不会执行右端</p><p>案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int a = 1;</span><br><span class="line">int b = 2;</span><br><span class="line">boolean flag = a==2 &amp;&amp; (a&gt;b);//&amp;&amp;左端已经为false，则右端不会再进行判断</span><br><span class="line">System.out.println()</span><br></pre></td></tr></table></figure><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>语法：布尔表达式?结果1:结果2</p><p>案例：求两个数最大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a = 1;</span><br><span class="line">int b = 2;</span><br><span class="line">int max = a&gt;b?a:b;</span><br></pre></td></tr></table></figure><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位运算符有哪些：</p><p>​        &amp;(与)，|(或)，^(异或) , ~(按位取反) , &lt;&lt;(左移) ,&gt;&gt;(右移) ,&gt;&gt;&gt;(无符号右移)</p><p>&amp;:有0则0<br>|:有1则1<br>^:相同则0，不同则1<br>~:按位取反 0变1 1变0</p><p>&lt;&lt; : 把&lt;&lt;左边的数据乘以2的移动次幂 例如 10&lt;&lt;3 结果 10*2^3=80</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int flag = 1&amp;2;  //0</span><br><span class="line">int flag = 1|2;  //3</span><br><span class="line">int flag = ~3;  //-4</span><br><span class="line">int num = 3&gt;&gt;2;  //3/2^2=0</span><br><span class="line">int num = 3&lt;&lt;2;  //3*2^2=12</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;进制&quot;&gt;&lt;a href=&quot;#进制&quot; class=&quot;headerlink&quot; title=&quot;进制&quot;&gt;&lt;/a&gt;进制&lt;/h1&gt;&lt;p&gt;二进制：由0、1组成，逢二进一，以0b开头，&lt;/p&gt;
&lt;p&gt;八进制：由0~7组成，逢八进一，以0开头&lt;/p&gt;
&lt;p&gt;十进制：由0~9组成，逢
      
    
    </summary>
    
      <category term="JavaSE" scheme="https://sombra002.github.io/categories/JavaSE/"/>
    
    
  </entry>
  
  <entry>
    <title>Java简介、注释、、常见DOS命令</title>
    <link href="https://sombra002.github.io/2019/04/01/Java%E7%AE%80%E4%BB%8B%E3%80%81%E6%B3%A8%E9%87%8A%E3%80%81%E3%80%81%E5%B8%B8%E8%A7%81DOS%E5%91%BD%E4%BB%A4/"/>
    <id>https://sombra002.github.io/2019/04/01/Java简介、注释、、常见DOS命令/</id>
    <published>2019-04-01T04:25:38.000Z</published>
    <updated>2019-04-29T04:43:52.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、DOS常用命令"><a href="#一、DOS常用命令" class="headerlink" title="一、DOS常用命令"></a>一、DOS常用命令</h1><table><thead><tr><th>DOS命令</th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>cd + 目录名</td><td>进入该目录</td></tr><tr><td>cd…</td><td>回退上一级目录</td></tr><tr><td>cd…/…/</td><td>回退上两级目录</td></tr><tr><td>cd /盘符 + 完整路径名</td><td>跨盘操作</td></tr><tr><td>md + 目录名</td><td>新建一个目录</td></tr><tr><td>rd + 目录名</td><td>删除一个空目录</td></tr><tr><td>rd /s + 目录名</td><td>删除非空目录，删除前会确认是否删除</td></tr><tr><td>rd /s /q + 目录名</td><td>删除非空目录，直接删除</td></tr><tr><td>del + 文件名.后缀名</td><td>删除该文件</td></tr><tr><td>del + *.后缀名</td><td>删除该目录下所有该后缀名的文件</td></tr><tr><td>mspaint</td><td>打开画图</td></tr><tr><td>calc</td><td>打开计算器</td></tr><tr><td>cls</td><td>清屏</td></tr><tr><td>exit</td><td>退出</td></tr><tr><td>hsotname</td><td>查看主机名</td></tr><tr><td>ipconfig</td><td>查看IP地址</td></tr><tr><td>shutdow -s -t 0</td><td>在0秒后关机</td></tr></tbody></table><h1 id="二、JDK-JRE-JVM"><a href="#二、JDK-JRE-JVM" class="headerlink" title="二、JDK JRE JVM"></a>二、JDK JRE JVM</h1><p>JDK：java开发工具包，提供给开发人员编写java程序<br>JRE：java运行环境，源代码由JRE运行<br>JVM：java虚拟机，实现跨平台<br>注：JDK包含JRE，使用JDK开发java程序，交给JRE运行，由JVM实现跨平台</p><h1 id="三、Java的三种注释"><a href="#三、Java的三种注释" class="headerlink" title="三、Java的三种注释"></a>三、Java的三种注释</h1><p>//单行注释</p><p>/<em><br>多行注释</em>/</p><p>/*<em><br>文档注释</em>/</p><h1 id="四、标识符"><a href="#四、标识符" class="headerlink" title="四、标识符"></a>四、标识符</h1><p>给类，变量等起的名字<br>不能以数字开头<br>可使用的符号：_ $<br>见名知意<br>给类命名首字母大写，多个字母采用驼峰式命名，如StudentName</p><h1 id="五、常量"><a href="#五、常量" class="headerlink" title="五、常量"></a>五、常量</h1><p>定义：在程序中值不会发生的量称作常量，分为字面值常量和自定义常量<br>字面值常量：</p><p>整数常量（1 2 3…）<br>小数常量（1.1 …）<br>字符常量（‘a’ ‘A’ ‘1’…）注：单引号括起来的一个字符<br>字符串常量（“String” “1” “A”）注：用双引号括起来的一个或多个字符<br>布尔常量（true false）</p><p>空常量（null）</p><h1 id="六、关键字的概述和使用"><a href="#六、关键字的概述和使用" class="headerlink" title="六、关键字的概述和使用"></a>六、关键字的概述和使用</h1><p>A:什么是关键字<br>    就是被java语言赋予特殊含义的单词。<br>B:关键字的特点<br>    组成关键的字母都是小写<br>C:常见关键字<br>    class,public,static,void …..<br>D:关键字的注意事项<br>    (1): goto和const是java语言的保留字<br>    (2): 类似与editplus这样的高级文本编辑器对关键字都是有颜色变化的</p><h1 id="七、标识符的概述和组成规则"><a href="#七、标识符的概述和组成规则" class="headerlink" title="七、标识符的概述和组成规则"></a>七、标识符的概述和组成规则</h1><p>“见名知意”<br>A:什么是标识符<br>    就是给类,接口,方法,变量,常量等起名字时使用的字符序列<br>B:标识符的组成规则<br>    (1): 英文的大小写字母<br>    (2): 数字字符<br>    (3): $和_<br>C:标识符注意事项<br>    (1): 不能以数字开头<br>    (2): 不能是java中的关键字<br>    (3): 区分大小写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、DOS常用命令&quot;&gt;&lt;a href=&quot;#一、DOS常用命令&quot; class=&quot;headerlink&quot; title=&quot;一、DOS常用命令&quot;&gt;&lt;/a&gt;一、DOS常用命令&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;DOS命令&lt;/th&gt;
&lt;th&gt;&lt;stro
      
    
    </summary>
    
      <category term="JavaSE" scheme="https://sombra002.github.io/categories/JavaSE/"/>
    
    
  </entry>
  
  <entry>
    <title>欢迎访问我的博客！</title>
    <link href="https://sombra002.github.io/2019/03/01/hello-world/"/>
    <id>https://sombra002.github.io/2019/03/01/hello-world/</id>
    <published>2019-03-01T04:25:38.000Z</published>
    <updated>2019-04-29T05:21:44.306Z</updated>
    
    <content type="html"><![CDATA[<p>技术博客、人生感悟、随便写写。</p><p>大家笑一笑就好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;技术博客、人生感悟、随便写写。&lt;/p&gt;
&lt;p&gt;大家笑一笑就好！&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
